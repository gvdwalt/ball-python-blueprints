blueprint:
  name: Ball Python Temp Control
  description: >
    Automatically regulates day and night temperatures for a ball python enclosure
    using a basking light and CTE based on warm-side temperature sensor. Includes
    a failsafe to shut down all heat sources if the temperature exceeds 35Â°C.
  domain: automation
  input:
    warm_side_sensor:
      name: Warm Side Temperature Sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature

    basking_switch:
      name: Basking Light Switch
      selector:
        entity:
          domain: light

    cte_switch:
      name: Ceramic Tile Emitter (CTE) Switch
      selector:
        entity:
          domain: switch

    day_mode_boolean:
      name: Day Mode Boolean
      selector:
        entity:
          domain: input_boolean

    day_target_temp:
      name: Day Target Temperature (Â°C)
      selector:
        number:
          min: 20
          max: 40
          step: 0.5
          unit_of_measurement: Â°C

    night_target_temp:
      name: Night Target Temperature (Â°C)
      selector:
        number:
          min: 15
          max: 30
          step: 0.5
          unit_of_measurement: Â°C

    buffer:
      name: Temperature Buffer (Â±Â°C)
      default: 1
      selector:
        number:
          min: 0.5
          max: 3
          step: 0.5
          unit_of_measurement: Â°C

trigger:
  - platform: state
    entity_id: !input warm_side_sensor
    for:
      seconds: 30

condition: []

action:
  - variables:
      current_temp: "{{ states(inputs.warm_side_sensor) | float }}"
      target_temp: >
        {{ iif(states(inputs.day_mode_boolean) == 'on', inputs.day_target_temp, inputs.night_target_temp) | float }}
      temp_buffer: "{{ inputs.buffer | float }}"

  - choose:
      # ðŸ”¥ FAILSAFE: Immediately shut off all heating if too hot
      - conditions:
          - condition: template
            value_template: "{{ current_temp > 35 }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input basking_switch
          - service: switch.turn_off
            target:
              entity_id: !input cte_switch
          - stop: true

      # ðŸ§  Main temp regulation logic
      - conditions:
          - condition: template
            value_template: "{{ current_temp < (target_temp - temp_buffer) }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input cte_switch
          - condition: template
            value_template: "{{ states(inputs.day_mode_boolean) == 'on' }}"
          - service: light.turn_on
            target:
              entity_id: !input basking_switch

      - conditions:
          - condition: template
            value_template: "{{ current_temp > (target_temp + temp_buffer) }}"
        sequence:
          - service:
