blueprint:
  name: Ball Python Temperature Control
  description: >
    Controls basking and CTE heat sources based on day/night mode and warm-side temperature.
    Includes failsafe shutdown at 35¬∞C.
  domain: automation
  input:
    warm_side_sensor:
      name: Warm Side Temperature Sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature

    day_mode_boolean:
      name: Day Mode Boolean
      selector:
        entity:
          domain: input_boolean

    day_target_temp:
      name: Day Target Temperature
      selector:
        entity:
          domain: input_number

    night_target_temp:
      name: Night Target Temperature
      selector:
        entity:
          domain: input_number

    buffer:
      name: Temperature Buffer (¬∞C)
      default: 0.5
      selector:
        number:
          min: 0
          max: 5
          step: 0.1

    basking_light:
      name: Basking Light (Switch or Light)
      selector:
        entity:
          domain:
            - light
            - switch

    cte_switch:
      name: Ceramic Tile Emitter (CTE) Switch
      selector:
        entity:
          domain:
            - switch
            - light

trigger:
  - platform: time_pattern
    minutes: "/5"

variables:
  current_temp: "{{ states(warm_side_sensor) | float }}"
  target_temp: >
    {{ iif(states(day_mode_boolean) == 'on',
           states(day_target_temp) | float,
           states(night_target_temp) | float) }}
  temp_buffer: "{{ buffer | float }}"

action:
  - choose:

      # ‚ùÑÔ∏è Failsafe: Overheat condition (shutdown everything if temp > 35¬∞C)
      - conditions:
          - condition: numeric_state
            entity_id: !input warm_side_sensor
            above: 35
        sequence:
          - service: homeassistant.turn_off
            target:
              entity_id:
                - !input basking_light
                - !input cte_switch

      # ‚òÄÔ∏è Day Mode Logic
      - conditions:
          - condition: state
            entity_id: !input day_mode_boolean
            state: "on"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ current_temp < target_temp - temp_buffer }}"
                sequence:
                  - service: homeassistant.turn_on
                    target:
                      entity_id:
                        - !input basking_light
                        - !input cte_switch

              - conditions:
                  - condition: template
                    value_template: "{{ current_temp > target_temp + temp_buffer }}"
                sequence:
                  - service: homeassistant.turn_off
                    target:
                      entity_id:
                        - !input basking_light
                        - !input cte_switch

      # üåô Night Mode Logic (CTE only)
      - conditions:
          - condition: state
            entity_id: !input day_mode_boolean
            state: "off"
        sequence:
          # ‚úÖ Always turn off basking at night
          - service: homeassistant.turn_off
            target:
              entity_id: !input basking_light

          # Then manage CTE based on temp
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ current_temp < target_temp - temp_buffer }}"
                sequence:
                  - service: homeassistant.turn_on
                    target:
                      entity_id: !input cte_switch

              - conditions:
                  - condition: template
                    value_template: "{{ current_temp > target_temp + temp_buffer }}"
                sequence:
                  - service: homeassistant.turn_off
                    target:
                      entity_id: !input cte_switch

mode: single
