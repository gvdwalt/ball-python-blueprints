blueprint:
  name: Ball Python Temp Control (with Cooldown Mode)
  description: >
    Regulates basking and CTE heat sources based on a helper-controlled target temperature.
    Includes a failsafe shutdown if temp exceeds 35¬∞C.
    Supports dynamic cooldown mode before nightfall.
  domain: automation
  input:
    warm_side_sensor:
      name: Warm Side Temperature Sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature

    target_temp:
      name: Snake Target Temperature (Helper)
      selector:
        entity:
          domain: input_number

    basking_switch:
      name: Basking Light Switch
      selector:
        entity:
          domain: light

    cte_switch:
      name: CTE Switch
      selector:
        entity:
          domain: switch

    buffer:
      name: Temperature Buffer (¬±¬∞C)
      default: 1
      selector:
        number:
          min: 0.5
          max: 3
          step: 0.5
          unit_of_measurement: ¬∞C

    day_mode_boolean:
      name: Day Mode Boolean
      selector:
        entity:
          domain: input_boolean

trigger:
  - platform: state
    entity_id: !input warm_side_sensor
    for:
      seconds: 30

  - platform: state
    entity_id: !input day_mode_boolean

condition: []

action:
  - variables:
      warm_sensor: !input warm_side_sensor
      target_temp_entity: !input target_temp
      day_mode_entity: !input day_mode_boolean
      current_temp: "{{ states(warm_sensor) | float }}"
      cooldown_active: "{{ is_state('input_boolean.snake_cooldown_active', 'on') }}"
      buffer: !input buffer
      target_temp: >
        {% if cooldown_active %}
          {{ states('input_number.snake_target_temperature') | float }}
        {% else %}
          {{ states(target_temp_entity) | float }}
        {% endif %}

  - choose:

      # üî• FAILSAFE
      - conditions:
          - condition: template
            value_template: "{{ current_temp > 35 }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input basking_switch
          - service: switch.turn_off
            target:
              entity_id: !input cte_switch
          - stop: true

      # ‚ùÑÔ∏è TOO COLD
      - conditions:
          - condition: template
            value_template: "{{ current_temp < (target_temp - buffer) }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input cte_switch
          - condition: template
            value_template: "{{ is_state(day_mode_entity, 'on') }}"
          - service: light.turn_on
            target:
              entity_id: !input basking_switch

      # üî• TOO HOT
      - conditions:
          - condition: template
            value_template: "{{ current_temp > (target_temp + buffer) }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input cte_switch
          - condition: template
            value_template: "{{ is_state(day_mode_entity, 'on') }}"
          - service: light.turn_off
            target:
              entity_id: !input basking_switch

      # ‚úÖ IN RANGE
      - conditions:
          - condition: template
            value_template: >
              {{ (current_temp >= (target_temp - buffer)) and (current_temp <= (target_temp + buffer)) }}
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input cte_switch
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ is_state(day_mode_entity, 'on') }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input basking_switch
              - conditions:
                  - condition: template
                    value_template: "{{ is_state(day_mode_entity, 'off') }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input basking_switch

mode: single
